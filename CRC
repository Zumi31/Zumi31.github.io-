#include<stdio.h>    
#include<string.h>   

#define N strlen(gen_poly)   
char data[28], check_value[28], gen_poly[10];   
int data_length, i, j;   

void XOR() {   
    for(j = 1; j < N; j++)   
        check_value[j] = (check_value[j] == gen_poly[j]) ? '0' : '1';   
}   

void crc() {   
    for(i = 0; i < N; i++)   
        check_value[i] = data[i];   
    do {   
        if(check_value[0] == '1')   
            XOR();   
        for(j = 0; j < N - 1; j++)   
            check_value[j] = check_value[j + 1];   
        check_value[j] = data[i++];   
    } while(i <= data_length + N - 1);   
}   

void receiver() {   
    printf("Enter the received data: ");   
    scanf("%s", data);   
    printf("\n-----------------------------\n");   
    printf("Data received: %s", data);   
    crc();   
    for(i = 0; (i < N - 1) && (check_value[i] != '1'); i++);   
    if(i < N - 1)   
        printf("\nError detected\n\n");   
    else   
        printf("\nNo error detected\n\n");   
}   

int main() {   
    printf("\nEnter data to be transmitted: ");   
    scanf("%s", data);   
    printf("\nEnter the Generating polynomial: ");   
    scanf("%s", gen_poly);   
    data_length = strlen(data);   
    for(i = data_length; i < data_length + N - 1; i++)   
        data[i] = '0';   
    printf("\n----------------------------------------");   
    printf("\n Data padded with n-1 zeros : %s", data);   
    printf("\n----------------------------------------");   
    crc();   
    printf("\nCRC or Check value is : %s", check_value);   
    for(i = data_length; i < data_length + N - 1; i++)   
        data[i] = check_value[i - data_length];   
    printf("\n----------------------------------------");   
    printf("\n Final data to be sent : %s", data);   
    printf("\n----------------------------------------\n");   
    receiver();   
    return 0;   
}   

The aim is to write a program that uses CRC to detect errors in transmitted data.
desc:
The Cyclic Redundancy Check algorithm checks for errors and verifies the accuracy of the data delivered by the sender.
CRC ensures data integrity by using a **generator polynomial** and performing binary division to compute a check value (CRC). This check value is appended to the transmitted data. given by - (formula)
On the receiver's end, binary division is performed again. If the remainder is zero, the data is error-free.

#### Key Concepts:
1. **Polynomial Representation**: Data is represented as a polynomial (e.g., binary 1010101 becomes x7+x5+x3+1 ).
2. **Generator Polynomial**: A fixed polynomial used as the divisor (e.g., ).
3. **Binary Division**: Data is appended with  zeros (where  is the generator polynomial's degree) before division.

### **Steps in CRC Calculation**
1. **Sender Side**:
   - Pad the data with  zeros.
   - Divide using binary division (XOR-based).
   - Append the remainder (CRC value) to the data.
2. **Receiver Side**:
   - Perform binary division on received data.
   - If the remainder is zero, data is valid; otherwise, it contains errors.

#### XOR Rules:(XOR TABLE

- One characteristics of the Cyclic Redundancy Check is the following procedure:

  CRC(x^y^z) == crc(x)^ crc(y)^ crc (z).

  The XOR function is represented by the symbol ^. I
- f we XOR three pieces of data and then CRC the result, the CRC result will be the same as if we CRC each piece of data separately and then

  XOR with the results.
- &#x20;When both inputs are the same, the XOR operator returns 0, and while in all other circumstances it returns 1.

---

### **Algorithm**

The program uses C and involves:

1\. Input data and generator polynomial.

2\. Append \`n-1\` zeros (length of generator polynomial) to the data. &#x20;

3\. Call the CRC function: &#x20;

&#x20;  \- Extract the first \`n\` bits of data. &#x20;

&#x20;  \- Perform XOR with the generator polynomial if the first bit is 1. &#x20;

&#x20;  \- Shift bits left by 1 and append the next data bit. &#x20;

&#x20;  \- Repeat until all data bits are processed. &#x20;

4\. Check for errors (Receiver): &#x20;

&#x20;  \- Perform CRC on received data. &#x20;

&#x20;  \- If the remainder has any \`1\`s, an error is detected; otherwise, data is error-free. &#x20;

5\. Use \`strlen()\` for string length operations. &#x20;

This ensures data integrity during transmission.

---

### **Example Outputs**

1. **Input**:

   - Data: `1001101`
   - Generator Polynomial: `1011`

2. **Results**:

   - Data with Padding: `1001101000`
   - CRC Value: `101`
   - Final Data Sent: `1001101101`
   - Received Data Check: **No error detected**

3. **Another Input**:

   - Data: `101101`
   - Received Data: `110101001`
   - Result: **Error detected**

---
